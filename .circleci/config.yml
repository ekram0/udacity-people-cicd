version: 2.1

orbs:
  slack: circleci/slack@4.9.3

commands:
  notify_on_failure:
    steps:
      - slack/notify:
          event: fail
          channel: Circle_CICD
          template: basic_fail_1
  install_awscli:
    description: Install AWS CLI (from cache if possible)
    steps:
      - restore_cache:
          key: awscliv2
          paths:
            - /tmp/aws    
      - run:
          name: Install AWS CLI v2
          command: |
            # Skip downloading aws-cli bundle if cached
            if [[ ! -f /tmp/aws/install ]]; then
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip 
            sudo ./aws/install
            fi
            # Skip installing if command exists
            if ! command -v aws &> /dev/null; then
              sudo /tmp/aws/install -i ~/bin
            fi
      - save_cache:
          key: awscliv2
          paths:
            - /tmp/aws
  
  install_ansible:
    description: install ansible
    steps:
      - restore_cache:
          keys:
            - ansibleKey
      - run:
          name: install ansible
          command: |
            if ! ansible --version; then
            sudo apt update 
            sudo apt install -y software-properties-common  
            sudo add-apt-repository --yes --update ppa:ansible/ansible 
            sudo apt install -y ansible 
            fi
      - save_cache:
          paths:
            - /bin/ansible
            - /etc/ansible
          key: ansibleKey


  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-db-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
  revert-migrations:
     description: Revert the last migration, if any were executed during the current workflow
     parameters:
       Workflow_ID:
         type: string
         default: ${CIRCLE_WORKFLOW_ID:0:7}
     steps:
       - run:
           name: Revert migrations
           when: on_fail
           command: |
             SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)

             # Logic for reverting the database state
             if (( $SUCCESS == 1 ));
             then
               cd ~/project/backend
               npm install
               npm run migration:revert
             fi
  install_nodejs:
    description: Install Node.js 13.8.0
    steps:
      - restore_cache:
          key: nodejs
          paths:
            - node_modules
      - run:
          name: Install Node.js 13.8.0
          command: |
            # Install Node.js LTS version as our base Node.js version
            # Skip downloading node js bundle if cached
            if [[ ! -f node_modules ]]; then
            echo "------ node js not cached -----"
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs

            # Use n version manager to use Node.js v13.8.0
            sudo npm install --global n
            sudo n 13.8.0
            fi
            # Skip installing if command exists
            if ! command -v node &> /dev/null; then
              sudo node_modules -i ~/bin
            fi
      - save_cache:
          key: nodejs
          paths:
            - node_modules

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i 
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps
      - notify_on_failure

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i 
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps
      - notify_on_failure

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: front-end unit test
          command: |
            cd frontend
            npm i 
            npm test
      - notify_on_failure

  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm i 
            npm test
      - notify_on_failure

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: front-end scan
          command: |
            cd frontend
            npm i 
            npm audit fix --force --audit-level=critical            
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
      - notify_on_failure

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm i 
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
      - notify_on_failure

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
  configure-infrastructure:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_ansible
      - install_awscli
      - add_ssh_keys:
          fingerprints: ["ea:bf:d3:de:9c:e9:1e:f5:be:ef:b6:6a:f2:ce:da:6c"]
      - attach_workspace:
          at: ~/
      - run:
          name: Run Configure Server Ansible play
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [backend-build]
      - install_awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            echo "........npm install........"
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb
          command: |
            echo "...................."
            cat ~/project/backend/migrations_dump.txt
            echo "...................."
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
              echo "No migrations are pending" 
            fi
      - destroy-environment
      - revert-migrations
    
  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[].Instances[].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:9100"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:9100" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-db-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment      
      - revert-migrations


  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_ansible
      - install_awscli
      - install_nodejs
      - add_ssh_keys:
          fingerprints: ["ea:bf:d3:de:9c:e9:1e:f5:be:ef:b6:6a:f2:ce:da:6c"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Package Backend
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*

            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts

            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations



  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # install AWS CLI
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            # install node js
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs
            sudo npm install --global n
            sudo n 13.8.0
      - run:
          name: Backend smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[].Instances[].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:9100"
            echo "API_URL = ${API_URL}"
            if curl -s "${API_URL}/api/status" | grep "ok"
            then
              exit 1
            else
              echo "backend is working successfully"
              exit 0
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              echo "Frontend is working successfully"
              exit 1
            else
              echo "Frontend is working successfully"
              exit 0
            fi
      # Here's where you will add some code to rollback on failure  
      - destroy-environment      
      - revert-migrations

  #   cloudfront-update:
  #     docker:
  #       # Docker image here that supports AWS CLI
  #     steps:
  #       # Checkout code from git
  #       - run:
  #           name: Install dependencies
  #           command: |
  #             # your code here
  #       - run:
  #           name: Update cloudfront distribution
  #           command: |
  #             # your code here
  #       # Here's where you will add some code to rollback on failure

  # cleanup:
  #     docker:
  #       # Docker image here
  #     steps:
  #       # Checkout code from git
  #       - run:
  #           name: Get old stack workflow id
  #           command: |
  #             # your code here
  #             export OldWorkflowID="the id here"
  #             export STACKS=[] #put the list of stacks here
  #       - run:
  #           name: Remove old stacks and files
  #           command: |
  #             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
  #             then
  #               # your code here
  #             fi

  notify_on_success:
    docker:
      - image: cimg/base:stable
    steps:
      - slack/notify:
          event: pass
          channel: Circle_CICD
          template: success_tagged_deployment_1

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      # - notify_on_success:
      #     requires: [scan-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
